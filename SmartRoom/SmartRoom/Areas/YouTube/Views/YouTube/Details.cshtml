@model SmartRoom.Database.Tables.YoutubeLiveDetail

@{
    ViewBag.Title = "Details";
}

<h2>Details</h2>

<div>
    <h4>YoutubeLiveDetail</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Course.Subject)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Course.Subject)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.BroadcastId)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.BroadcastId)
        </dd>

        <!--  <dt>
               @Html.DisplayNameFor(model => model.BroadcastKind)
           </dt>

           <dd>
               @Html.DisplayFor(model => model.BroadcastKind)
           </dd>
           -->

        <dt>
            @Html.DisplayNameFor(model => model.BroadcastTitle)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.BroadcastTitle)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.BroadcastDescription)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.BroadcastDescription)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.BroadcastScheduledStartTime)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.BroadcastScheduledStartTime)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.BroadcastScheduledEndTime)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.BroadcastScheduledEndTime)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.BroadcastStatus)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.BroadcastStatus)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.BroadcastchannelId)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.BroadcastchannelId)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.BroadcastlifeCycleStatus)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.BroadcastlifeCycleStatus)
        </dd>

        <!--    <dt>
                   @Html.DisplayNameFor(model => model.BroadcastEmbededhtml)
               </dt>
        -->
        <dd style="display:none;" id="videoId">
            @Html.DisplayFor(model => model.BroadcastEmbededhtml)
        </dd>

        <!--    <dt>
                @Html.DisplayNameFor(model => model.StreamId)
            </dt>

            <dd>
                @Html.DisplayFor(model => model.StreamId)
            </dd>
             -->
        <!--   <dt>
               @Html.DisplayNameFor(model => model.StreamKind)
           </dt>

           <dd>
               @Html.DisplayFor(model => model.StreamKind)
           </dd>
            -->
        <dt>
            @Html.DisplayNameFor(model => model.StreamName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.StreamName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.StreamStatus)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.StreamStatus)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.StreamSnippetTitle)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.StreamSnippetTitle)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.StreamCDNFormat)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.StreamCDNFormat)
        </dd>

        <!--  <dt>
              @Html.DisplayNameFor(model => model.StreamCDNIngestionType)
          </dt>

          <dd>
              @Html.DisplayFor(model => model.StreamCDNIngestionType)
          </dd>
            -->
        <dt>
            @Html.DisplayNameFor(model => model.StreamCDNIngestionUrl)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.StreamCDNIngestionUrl)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.StreamcontentclosedCaptionsIngestionUrl)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.StreamcontentclosedCaptionsIngestionUrl)
        </dd>

    </dl>


</div>
<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.Id }) |
    @Html.ActionLink("Back to List", "Index")
</p>

<div>
    <div id="player"> </div>
    <script>
        // 2. This code loads the IFrame Player API code asynchronously.
        var tag = document.createElement('script');

        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        // 3. This function creates an <iframe>(and YouTube player)
        //    after the API code downloads.
        var player;

        function onYouTubeIframeAPIReady() {

            var Id1 = document.getElementById('videoId').textContent;

            player = new YT.Player('player', {
                height: '390',
                width: '640',
                videoId: Id1.trim(), // videoId
                events: {
                    'onReady': onPlayerReady,
                    'onStateChange': onPlayerStateChange
                }
            });
        }

        // 4. The API will call this function when the video player is ready.
        function onPlayerReady(event) {
            // event.target.playVideo();
        }

        // 5. The API calls this function when the player's state changes.
        //    The function indicates that when playing a video (state=1),
        //    the player should play for six seconds and then stop.
        var done = false;

        function onPlayerStateChange(event) {
            if (event.data == YT.PlayerState.PLAYING && !done) {
                done = true;
            }
        }
        function stopVideo() {
            player.stopVideo();
        }
    </script>
</div>
